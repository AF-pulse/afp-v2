name: Build + Deploy Assemble (ACA)

on:
  workflow_dispatch:
    inputs:
      resource_group:
        description: "Azure Resource Group (t.ex. afp-rg)"
        required: true
        type: string
      job_name:
        description: "ACA Job name"
        required: true
        default: "afp-assemble-job"
        type: string
      acr_name:
        description: "ACR (utan .azurecr.io), t.ex. afpacr"
        required: true
        type: string
      image_name:
        description: "Image-namn i ACR"
        required: true
        default: "afp-runner"
        type: string
      blob_prefix:
        description: "Skrivprefix (dÃ¤r assemble lÃ¤gger output)"
        required: true
        default: "assembler/"
        type: string
      read_prefix:
        description: "LÃ¤sprefix (var assemble lÃ¤ser sections frÃ¥n)"
        required: true
        default: "producer/"
        type: string
      lang:
        description: "SprÃ¥k-stig fÃ¶r episodes (t.ex. en)"
        required: true
        default: "en"
        type: string

env:
  SECRET_NAME: blob-container-sas-url

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Enable Container Apps CLI
        run: |
          az extension add --name containerapp --upgrade -y || true
          az config set extension.use_dynamic_install=yes_without_prompt

      - name: ACR login (AAD)
        run: az acr login --name "${{ inputs.acr_name }}"

      - name: Compute image ref (uses run number)
        run: |
          echo "IMAGE_TAG=gh-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          echo "IMAGE_REF=${{ inputs.acr_name }}.azurecr.io/${{ inputs.image_name }}:gh-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: Build & push image
        run: |
          docker build -t "$IMAGE_REF" .
          docker push "$IMAGE_REF"

      - name: Ensure SAS secret on job
        run: |
          az containerapp job secret set \
            --name "${{ inputs.job_name }}" \
            --resource-group "${{ inputs.resource_group }}" \
            --secrets "${{ env.SECRET_NAME }}=${{ secrets.BLOB_CONTAINER_SAS_URL }}"

      - name: Update job (image + env)
        run: |
          az containerapp job update \
            --name "${{ inputs.job_name }}" \
            --resource-group "${{ inputs.resource_group }}" \
            --image "$IMAGE_REF" \
            --set-env-vars \
              JOB_TYPE=assemble \
              READ_PREFIX="${{ inputs.read_prefix }}" \
              BLOB_PREFIX="${{ inputs.blob_prefix }}" \
              LANG="${{ inputs.lang }}" \
              BLOB_CONTAINER_SAS_URL=secretref:${{ env.SECRET_NAME }}

      # ðŸ”§ SÃ¤tt korrekt kommando i exec-form via --set (inte tomt kommando)
      - name: Force correct command (exec form via --set)
        run: |
          az containerapp job update \
            --name "${{ inputs.job_name }}" \
            --resource-group "${{ inputs.resource_group }}" \
            --set "template.containers[0].command=['/usr/local/bin/python','-m','src.assembler.main']" \
                 "template.containers[0].args=[]"

      # Starta och fÃ¥nga execution-namnet
      - name: Start job (capture execution name)
        id: start_run
        run: |
          OUT=$(az containerapp job start \
            --name "${{ inputs.job_name }}" \
            --resource-group "${{ inputs.resource_group }}" \
            -o json)
          echo "$OUT"
          EXEC_NAME=$(echo "$OUT" | jq -r '.name')
          echo "EXEC_NAME=$EXEC_NAME" >> $GITHUB_ENV

      # VÃ¤nta in status; visa sista loggraderna vid fail/timeout
      - name: Wait for execution status
        run: |
          echo "Waiting for execution: $EXEC_NAME"
          for i in {1..60}; do
            ST=$(az containerapp job execution show \
                  --name "${{ inputs.job_name }}" \
                  --resource-group "${{ inputs.resource_group }}" \
                  --execution "$EXEC_NAME" \
                  --query properties.status -o tsv 2>/dev/null || echo "Pending")
            echo "[$i] Status: $ST"
            if [ "$ST" = "Succeeded" ]; then
              echo "Job Succeeded"; exit 0
            fi
            if [ "$ST" = "Failed" ]; then
              echo "---- Last 200 log lines ----"
              az containerapp job execution logs show \
                --name "${{ inputs.job_name }}" \
                --resource-group "${{ inputs.resource_group }}" \
                --execution "$EXEC_NAME" \
                --tail 200 || true
              exit 1
            fi
            sleep 5
          done
          echo "Timeout waiting for job execution"
          az containerapp job execution logs show \
            --name "${{ inputs.job_name }}" \
            --resource-group "${{ inputs.resource_group }}" \
            --execution "$EXEC_NAME" \
            --tail 200 || true
          exit 1

      - name: Summary
        run: |
          echo "### Assemble deployed & ran" >> $GITHUB_STEP_SUMMARY
          echo "- Image: \`$IMAGE_REF\`" >> $GITHUB_STEP_SUMMARY
          echo "- Execution: \`$EXEC_NAME\`" >> $GITHUB_STEP_SUMMARY

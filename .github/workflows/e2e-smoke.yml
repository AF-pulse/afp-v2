name: E2E Smoke — Collect → Produce → Assemble

on:
  workflow_dispatch:
    inputs:
      resource_group:
        description: "Azure Resource Group (t.ex. afp-rg)"
        required: true
        type: string
      acr_name:
        description: "ACR (utan .azurecr.io), t.ex. afpacr"
        required: true
        type: string
      image_name:
        description: "Image-namn i ACR"
        required: true
        default: "afp-runner"
        type: string
      collect_job:
        description: "Collect job name"
        required: true
        default: "afp-collect-job"
        type: string
      produce_job:
        description: "Produce job name"
        required: true
        default: "afp-produce-job"
        type: string
      assemble_job:
        description: "Assemble job name"
        required: true
        default: "afp-assemble-job"
        type: string
      league:
        description: "League (mappnamn)"
        required: true
        default: "premier_league"
        type: string
      feed_name:
        description: "Feed under curated/news/"
        required: true
        default: "guardian_football"
        type: string
      lang:
        description: "Språk-stig för sections/episodes"
        required: true
        default: "en"
        type: string

env:
  SECRET_NAME: blob-container-sas-url
  COLLECT_PREFIX: collector/
  PRODUCE_PREFIX: producer/
  ASSEMBLE_PREFIX: assembler/

jobs:
  e2e:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Enable Container Apps CLI
        run: |
          az extension add --name containerapp --upgrade -y || true
          az config set extension.use_dynamic_install=yes_without_prompt

      - name: ACR login (AAD)
        run: az acr login --name "${{ inputs.acr_name }}"

      - name: Compute refs
        run: |
          echo "DATE_UTC=$(date -u +%F)" >> $GITHUB_ENV
          echo "IMAGE_TAG=gh-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          echo "IMAGE_REF=${{ inputs.acr_name }}.azurecr.io/${{ inputs.image_name }}:gh-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: Build & push image
        run: |
          docker build -t "$IMAGE_REF" .
          docker push "$IMAGE_REF"

      - name: Ensure SAS secret on all jobs
        run: |
          for JOB in "${{ inputs.collect_job }}" "${{ inputs.produce_job }}" "${{ inputs.assemble_job }}"; do
            az containerapp job secret set \
              --name "$JOB" \
              --resource-group "${{ inputs.resource_group }}" \
              --secrets "${{ env.SECRET_NAME }}=${{ secrets.BLOB_CONTAINER_SAS_URL }}"
          done

      # ------------ COLLECT ------------
      - name: Update COLLECT (image + env)
        run: |
          az containerapp job update \
            --name "${{ inputs.collect_job }}" \
            --resource-group "${{ inputs.resource_group }}" \
            --image "$IMAGE_REF" \
            --set-env-vars \
              JOB_TYPE=collect \
              BLOB_PREFIX="${{ env.COLLECT_PREFIX }}" \
              BLOB_CONTAINER_SAS_URL=secretref:${{ env.SECRET_NAME }}

      - name: Start COLLECT (capture exec)
        run: |
          echo "EXEC_COLLECT=$(az containerapp job start \
            --name "${{ inputs.collect_job }}" \
            --resource-group "${{ inputs.resource_group }}" \
            --query name -o tsv)" >> $GITHUB_ENV

      - name: Wait COLLECT status
        run: |
          for i in {1..60}; do
            ST=$(az containerapp job execution show \
              --name "${{ inputs.collect_job }}" \
              --resource-group "${{ inputs.resource_group }}" \
              --execution "$EXEC_COLLECT" \
              --query properties.status -o tsv 2>/dev/null || echo "Pending")
            echo "[collect $i] $ST"
            if [ "$ST" = "Succeeded" ]; then exit 0; fi
            if [ "$ST" = "Failed" ]; then
              az containerapp job execution logs show \
                --name "${{ inputs.collect_job }}" \
                --resource-group "${{ inputs.resource_group }}" \
                --execution "$EXEC_COLLECT" --tail 200 || true
              exit 1
            fi
            sleep 5
          done
          exit 1

      - name: Wait COLLECT blob
        run: |
          SAS="${{ secrets.BLOB_CONTAINER_SAS_URL }}"
          ACC=$(echo "$SAS" | sed -n 's~https://\([^\.]*\)\.blob.core.windows.net/.*~\1~p')
          CON=$(echo "$SAS" | sed -n 's~https://[^/]*/\([^?]*\)\?.*~\1~p')
          TOK=$(echo "$SAS" | sed -n 's~[^?]*?\(.*\)~\1~p')
          TGT="${{ env.COLLECT_PREFIX }}curated/news/${{ inputs.feed_name }}/${{ inputs.league }}/$DATE_UTC/items.json"
          echo "Expecting: $TGT"
          for i in {1..36}; do
            ok=$(az storage blob exists --account-name "$ACC" --container-name "$CON" --name "$TGT" --sas-token "$TOK" --query exists -o tsv || echo false)
            [ "$ok" = "true" ] && exit 0
            sleep 10
          done
          echo "Collect output not found: $TGT"; exit 1

      # ------------ PRODUCE ------------
      - name: Update PRODUCE (image + env, set LANG)
        run: |
          az containerapp job update \
            --name "${{ inputs.produce_job }}" \
            --resource-group "${{ inputs.resource_group }}" \
            --image "$IMAGE_REF" \
            --set-env-vars \
              JOB_TYPE=produce \
              READ_PREFIX="${{ env.COLLECT_PREFIX }}" \
              BLOB_PREFIX="${{ env.PRODUCE_PREFIX }}" \
              LANG="${{ inputs.lang }}" \
              BLOB_CONTAINER_SAS_URL=secretref:${{ env.SECRET_NAME }}

      - name: Start PRODUCE (capture exec)
        run: |
          echo "EXEC_PRODUCE=$(az containerapp job start \
            --name "${{ inputs.produce_job }}" \
            --resource-group "${{ inputs.resource_group }}" \
            --query name -o tsv)" >> $GITHUB_ENV

      - name: Wait PRODUCE status
        run: |
          for i in {1..60}; do
            ST=$(az containerapp job execution show \
              --name "${{ inputs.produce_job }}" \
              --resource-group "${{ inputs.resource_group }}" \
              --execution "$EXEC_PRODUCE" \
              --query properties.status -o tsv 2>/dev/null || echo "Pending")
            echo "[produce $i] $ST"
            if [ "$ST" = "Succeeded" ]; then exit 0; fi
            if [ "$ST" = "Failed" ]; then
              az containerapp job execution logs show \
                --name "${{ inputs.produce_job }}" \
                --resource-group "${{ inputs.resource_group }}" \
                --execution "$EXEC_PRODUCE" --tail 200 || true
              exit 1
            fi
            sleep 5
          done
          exit 1

      - name: Wait PRODUCE blob
        run: |
          SAS="${{ secrets.BLOB_CONTAINER_SAS_URL }}"
          ACC=$(echo "$SAS" | sed -n 's~https://\([^\.]*\)\.blob.core.windows.net/.*~\1~p')
          CON=$(echo "$SAS" | sed -n 's~https://[^/]*/\([^?]*\)\?.*~\1~p')
          TOK=$(echo "$SAS" | sed -n 's~[^?]*?\(.*\)~\1~p')
          TGT="${{ env.PRODUCE_PREFIX }}sections/$DATE_UTC/${{ inputs.league }}/_/S.NEWS.TOP3_GUARDIAN/${{ inputs.lang }}/section.txt"
          echo "Expecting: $TGT"
          for i in {1..36}; do
            ok=$(az storage blob exists --account-name "$ACC" --container-name "$CON" --name "$TGT" --sas-token "$TOK" --query exists -o tsv || echo false)
            [ "$ok" = "true" ] && exit 0
            sleep 10
          done
          echo "Produce output not found: $TGT"; exit 1

      # ------------ ASSEMBLE ------------
      - name: Render assemble YAML
        run: |
          mkdir -p infra
          cat > infra/assemble-job.rendered.yaml <<EOF
          name: ${{ inputs.assemble_job }}
          type: Microsoft.App/jobs
          location: westeurope
          properties:
            configuration:
              triggerType: Manual
            template:
              containers:
                - name: afp
                  image: $IMAGE_REF
                  command: [/usr/local/bin/python]
                  args: [-m, src.assembler.main]
                  env:
                    - { name: JOB_TYPE, value: assemble }
                    - { name: READ_PREFIX, value: "${{ env.PRODUCE_PREFIX }}" }
                    - { name: BLOB_PREFIX, value: "${{ env.ASSEMBLE_PREFIX }}" }
                    - { name: LANG, value: "${{ inputs.lang }}" }
                    - { name: BLOB_CONTAINER_SAS_URL, secretRef: blob-container-sas-url }
                  resources: { cpu: 0.5, memory: "1Gi" }
          EOF
          echo '--- rendered YAML ---'
          cat infra/assemble-job.rendered.yaml

      - name: Update ASSEMBLE from YAML
        run: |
          az containerapp job update \
            --name "${{ inputs.assemble_job }}" \
            --resource-group "${{ inputs.resource_group }}" \
            --yaml infra/assemble-job.rendered.yaml

      - name: Start ASSEMBLE (capture exec)
        run: |
          echo "EXEC_ASSEMBLE=$(az containerapp job start \
            --name "${{ inputs.assemble_job }}" \
            --resource-group "${{ inputs.resource_group }}" \
            --query name -o tsv)" >> $GITHUB_ENV

      - name: Wait ASSEMBLE status
        run: |
          for i in {1..60}; do
            ST=$(az containerapp job execution show \
              --name "${{ inputs.assemble_job }}" \
              --resource-group "${{ inputs.resource_group }}" \
              --execution "$EXEC_ASSEMBLE" \
              --query properties.status -o tsv 2>/dev/null || echo "Pending")
            echo "[assemble $i] $ST"
            if [ "$ST" = "Succeeded" ]; then exit 0; fi
            if [ "$ST" = "Failed" ]; then
              az containerapp job execution logs show \
                --name "${{ inputs.assemble_job }}" \
                --resource-group "${{ inputs.resource_group }}" \
                --execution "$EXEC_ASSEMBLE" --tail 200 || true
              exit 1
            fi
            sleep 5
          done
          exit 1

      - name: Wait ASSEMBLE blob (episode_manifest.json)
        run: |
          SAS="${{ secrets.BLOB_CONTAINER_SAS_URL }}"
          ACC=$(echo "$SAS" | sed -n 's~https://\([^\.]*\)\.blob.core.windows.net/.*~\1~p')
          CON=$(echo "$SAS" | sed -n 's~https://[^/]*/\([^?]*\)\?.*~\1~p')
          TOK=$(echo "$SAS" | sed -n 's~[^?]*?\(.*\)~\1~p')
          TGT="${{ env.ASSEMBLE_PREFIX }}episodes/$DATE_UTC/${{ inputs.league }}/daily/${{ inputs.lang }}/episode_manifest.json"
          echo "Expecting: $TGT"
          for i in {1..36}; do
            ok=$(az storage blob exists --account-name "$ACC" --container-name "$CON" --name "$TGT" --sas-token "$TOK" --query exists -o tsv || echo false)
            [ "$ok" = "true" ] && exit 0
            sleep 10
          done
          echo "Assemble output not found: $TGT"; exit 1

      - name: Summary
        run: |
          echo "### E2E OK" >> $GITHUB_STEP_SUMMARY
          echo "- Image: \`$IMAGE_REF\`" >> $GITHUB_STEP_SUMMARY
          echo "- Date (UTC): \`$DATE_UTC\`" >> $GITHUB_STEP_SUMMARY
          echo "- Lang: \`${{ inputs.lang }}\`" >> $GITHUB_STEP_SUMMARY
